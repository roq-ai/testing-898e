generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model customer_complaint {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  status     String   @db.VarChar(255)
  user_id    String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model delivery_partner {
  id                  String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  availability_status Boolean
  user_id             String?            @db.Uuid
  created_at          DateTime           @default(now()) @db.Timestamp(6)
  updated_at          DateTime           @default(now()) @db.Timestamp(6)
  user                user?              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  delivery_request    delivery_request[]
}

model delivery_request {
  id                  String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  status              String            @db.VarChar(255)
  delivery_partner_id String?           @db.Uuid
  restaurant_id       String?           @db.Uuid
  created_at          DateTime          @default(now()) @db.Timestamp(6)
  updated_at          DateTime          @default(now()) @db.Timestamp(6)
  delivery_partner    delivery_partner? @relation(fields: [delivery_partner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurant          restaurant?       @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model menu_item {
  id            String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String      @db.VarChar(255)
  price         Int
  restaurant_id String?     @db.Uuid
  created_at    DateTime    @default(now()) @db.Timestamp(6)
  updated_at    DateTime    @default(now()) @db.Timestamp(6)
  restaurant    restaurant? @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model operating_hour {
  id            String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  day_of_week   Int
  open_time     DateTime    @db.Time(6)
  close_time    DateTime    @db.Time(6)
  restaurant_id String?     @db.Uuid
  created_at    DateTime    @default(now()) @db.Timestamp(6)
  updated_at    DateTime    @default(now()) @db.Timestamp(6)
  restaurant    restaurant? @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model restaurant {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description      String?            @db.VarChar(255)
  image            String?            @db.VarChar(255)
  name             String             @db.VarChar(255)
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @default(now()) @db.Timestamp(6)
  user_id          String             @db.Uuid
  tenant_id        String             @db.VarChar(255)
  delivery_request delivery_request[]
  menu_item        menu_item[]
  operating_hour   operating_hour[]
  user             user               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email              String               @unique @db.VarChar(255)
  firstName          String?              @db.VarChar(255)
  lastName           String?              @db.VarChar(255)
  roq_user_id        String               @db.VarChar(255)
  tenant_id          String               @db.VarChar(255)
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime             @default(now()) @db.Timestamp(6)
  customer_complaint customer_complaint[]
  delivery_partner   delivery_partner[]
  restaurant         restaurant[]
}
